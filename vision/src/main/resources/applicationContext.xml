<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:jee="http://www.springframework.org/schema/jee"         
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/data/jpa 
            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            http://www.springframework.org/schema/cache 
            http://www.springframework.org/schema/cache/spring-cache.xsd
            http://www.springframework.org/schema/security 
            http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/jee 
            http://www.springframework.org/schema/jee/spring-jee.xsd              
           	http://www.springframework.org/schema/task
		  	http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- scans the classpath for annotated components (including @Repostory 
    and @Service  that will be auto-registered as Spring beans  -->          
    <context:component-scan base-package="com.mikealbert" />
	
    <!-- AspectJ annotation -->
    <aop:aspectj-autoproxy />  
    
     <task:executor id="myexecutor" pool-size="5"  />
	<task:annotation-driven executor="myexecutor"/>
	
	<!-- menu  -->
	<import resource="menuConfig.xml"/>
		
	<!-- emails -->
    <import resource="emailComponents.xml"/>
	
    <jpa:repositories base-package="com.mikealbert.vision.dao" />	
    <jpa:repositories base-package="com.mikealbert.data.dao" />	
    
    <context:property-placeholder location="classpath:buildInfo.properties,classpath:application.properties, file:///${mafs_conf}/vision/onbase.properties,
          file:///${mafs_conf}/vision/application.properties,file:///${mafs_conf}/vision/chrome.properties,file:///${mafs_conf}/vision/velocity.properties " 
          ignore-unresolvable="true" ignore-resource-not-found="true"/>	
   
    <!-- This will ensure that hibernate or jpa exceptions are automatically translated into
         Spring's generic DataAccessException hierarchy for those classes annotated with Repository
         For example see UserDaoJpa-->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
 
   <!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/visiondb" resource-ref="true"/> -->	 
   	
   	 <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="jdbc:oracle:thin:@svc-dev-db-dev1.mikealbert.corp:1522:DEV1" />
        <property name="username" value="VISION" />
        <property name="password" value="VISION" />
 	</bean> 
   	
	<bean id="entityManagerFactory"  
	      class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
         <property name="persistenceUnitName" value="CorePU"/>  
         <property name="dataSource" ref="dataSource"/>     
         <property name="jpaVendorAdapter">  
             <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
                 <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>
                 <property name="showSql" value="false" />  
                 <property name="generateDdl" value="false" />               
             </bean>  
         </property>  
         <property name="packagesToScan">
             <list>
                 <value>com.mikealbert.data.entity</value>
             </list>
         </property>    
    </bean>     
    
     <!-- Added  JSFFaceResolver to get mocked face context for JUnit-->
	<bean id="faceContextResolver" class="com.mikealbert.util.JSFFaceResolver"/>
	
    <!-- bean post-processor for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
 
    <!-- Transaction Config -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <!-- use declarative transaction management  -->
    <tx:annotation-driven  transaction-manager="transactionManager"/>
    
    <!-- Custom Scope Config -->
    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="view">
                    <bean class="com.mikealbert.util.ViewScope"/>
                </entry>
            </map>
        </property>
    </bean>
    
    <!-- cache configuration -->
    <import resource="classpath:cacheContext.xml"/>
	
	
	<!-- Needed primarily for Audit Logging of DB transactions -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:pointcut id="mafsCoreDAOMethods" expression="execution(* com.mikealbert.data.dao.*DAOImpl.*(..))" />        
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mafsCoreDAOMethods"/>
    </aop:config>
    	
	
	<!-- Resource Bundle -->
	<bean id="messageSource"
                     class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
         <property name="basename" value="classpath:messages"/>
         <property name="defaultEncoding" value="UTF-8"/>
         <property name="cacheSeconds" value ="5"/>
	</bean>	
      
    <!-- security stuff -->
   	<!-- authentication -->
   	<sec:authentication-manager alias="authenticationManager">
   		<sec:authentication-provider ref="preauthAuthProvider" />  
        <sec:ldap-authentication-provider server-ref="ldapServer" user-search-base="${ldap.search.base}" 
                user-search-filter="${ldap.search.filter}" user-context-mapper-ref="ldapUserDetailsContextMapper" />                         
	</sec:authentication-manager>
	
	<sec:ldap-server id="ldapServer" url="${ldap.server.url}" manager-dn="${ldap.manager.dn}" manager-password="${ldap.manager.password}" />
	
    <bean class="com.mikealbert.vision.bean.processor.LdapAuthoritiesPopulatorPostProcessor"/>
			
    <bean id="preauthAuthProvider"
            class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService" ref="userDetailsService" />
    </bean>
    
    <!-- url based authorization -->
    <sec:http security="none" pattern="/javax.faces.resource/**" />
    <sec:http security="none" pattern="/images/**" />
    <sec:http security="none" pattern="/themes/**" />
    <sec:http security="none" pattern="/css/**" />    
    <sec:http security="none" pattern="/view/maintSchedules/report.xhtml" />
    
    <sec:http use-expressions="true" auto-config="true">
    	<sec:form-login login-page="/login.xhtml" />    
    	<sec:intercept-url pattern="/view/admin/**" access="hasAnyAuthority('PERMISSION_ADMINISTRATION','MISCELLANEOUS_ADMINISTRATION')" />
		<sec:intercept-url pattern="/view/**" access="hasAuthority('USER')" />
		<sec:custom-filter position="PRE_AUTH_FILTER" ref="audsidPreAuthFilter" />
		<sec:access-denied-handler error-page="/accessDenied.xhtml"/>
    	<sec:csrf disabled="true"/> 
	</sec:http>
	

	<bean id="audsidPreAuthFilter" class="com.mikealbert.vision.security.WillowPreAuthFilter">
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>	
	
    <!-- Quartz Job Scheduler -->	
    <bean id="maSchedulerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
	    <property name="targetObject" ref="lookupCacheService" />
	    <property name="targetMethod" value="refreshCache" />
    </bean>   
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="maSchedulerJob"/>
	    <!-- run every morning at 12 AM -->
        <property name="cronExpression" value="${refreshCache.cronExpression}"/>
    </bean>	
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="applicationContextSchedulerContextKey"><value>applicationContext</value></property>
        <property name="quartzProperties">
            <props>
			    <prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingTriggerHistoryPlugin</prop>
			    <prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">Trigger {1}.{0} fired job {6}.{5} at: {4, date, HH:mm:ss dd/MM/yyyy}</prop>
			    <prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage">Trigger {1}.{0} completed firing job {6}.{5} at {4, date, HH:mm:ss dd/MM/yyyy} with resulting trigger instruction code: {9}</prop>
			    <prop key="org.quartz.plugin.jobHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
			    <prop key="org.quartz.plugin.jobHistory.jobSuccessMessage">Job {1}.{0} fired at: {2, date, dd/MM/yyyy HH:mm:ss} result=OK</prop>
			    <prop key="org.quartz.plugin.jobHistory.jobFailedMessage">Job {1}.{0} fired at: {2, date, dd/MM/yyyy HH:mm:ss} result=ERROR</prop>			     			     
            </props>  
        </property>
        <property name="jobDetails">
	        <list>
	            <ref bean="maSchedulerJob" />
	        </list>
	     </property>
	     <property name="triggers">
	         <list>
		         <ref bean="cronTrigger" />
	         </list>
	     </property>                           	     
    </bean> 
    	
	<!-- method level authorization -->
	<sec:global-method-security secured-annotations="enabled" jsr250-annotations="enabled" />
	
	<bean id="vinDecoderRequestVO" name="vinDecoderRequestVO" class="com.mikealbert.service.vo.VinDecoderRequestVO" scope="prototype">
	 	<property name="enableService" value="${chrome.enableService}" />
	 	<property name="accountNumber" value="${chrome.accountNumber}" />
	 	<property name="accountSecret" value="${chrome.accountSecret}" />
	 	<property name="accountCountry" value="${chrome.accountCountry}" />
	 	<property name="accountLanguage" value="${chrome.accountLanguage}" />
	 	<property name="accountName" value="${chrome.accountName}" />
	 	<property name="wsdlURL" value="${chrome.wsdlURL}" />
	 	<property name="contectPath" value="${chrome.contectPath}" />
	</bean>
	
 </beans>