<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/data/jpa 
            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            http://www.springframework.org/schema/cache 
            http://www.springframework.org/schema/cache/spring-cache.xsd
            http://www.springframework.org/schema/security 
            http://www.springframework.org/schema/security/spring-security.xsd
            ">

    <!-- scans the classpath for annotated components (including @Repostory 
    and @Service  that will be auto-registered as Spring beans  -->          
    <context:component-scan base-package="com.mikealbert" />
    
    <!-- emails -->
    <import resource="emailComponents.xml"/>

    <!-- AspectJ annotation -->
    <aop:aspectj-autoproxy />  

    <jpa:repositories base-package="com.mikealbert.vision.dao" />
    <jpa:repositories base-package="com.mikealbert.data.dao" />
    
    <context:property-placeholder location="test_data.properties, file:///${mafs_conf}/vision/chrome.properties, file:///${mafs_conf}/vision/onbase.properties" ignore-unresolvable="true" ignore-resource-not-found="true"/>
   
    <!-- This will ensure that hibernate or jpa exceptions are automatically translated into
         Spring's generic DataAccessException hierarchy for those classes annotated with Repository
         For example see UserDaoJpa-->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
 	
	<bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="jdbc:oracle:thin:@svc-dev-db-DEV1:1522:DEV1" />
        <property name="username" value="VISION" />
        <property name="password" value="VISION" />
	</bean>
	
	<bean id="entityManagerFactory"  
	      class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
         <property name="persistenceUnitName" value="CorePU"/>  
         <property name="dataSource" ref="dataSource"/>
         <property name="jpaVendorAdapter">  
             <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
                 <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>  
                 <property name="showSql" value="false" />  
                 <property name="generateDdl" value="false" />  
             </bean>  
         </property>  
         <property name="packagesToScan">
             <list>
                 <value>com.mikealbert.data.entity</value>
             </list>
         </property>    
    </bean>  
    
    <!-- bean post-processor for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
 
    <!-- Transaction Config -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <!-- use declarative transaction management  -->
    <tx:annotation-driven  transaction-manager="transactionManager"/>
    
     <!-- cache configuration -->
    <import resource="classpath:cacheContext.xml"/>

    
	<!-- Needed primarily for Audit Logging of DB transactions -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:pointcut id="mafsCoreDAOMethods" expression="execution(* com.mikealbert.data.dao.*DAOImpl.*(..))" />        
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mafsCoreDAOMethods"/>
    </aop:config>
    
    <!-- Resource Bundle -->
	<bean id="messageSource"
                     class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
         <property name="basename" value="classpath:messages"/>
         <property name="defaultEncoding" value="UTF-8"/>
         <property name="cacheSeconds" value ="5"/>
	</bean>	
	
    <!-- Added  JSFFaceResolver to get mocked face context for JUnit-->
 	<bean id="faceContextResolver" class="com.mikealbert.testing.jsf.MockJSFFaceResolver"/>
    
 	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="view">
                    <bean class="com.mikealbert.util.ViewScope"/>
                </entry>
            </map>
        </property>
    </bean>
    
   	<bean id="workclassToRoleMap" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
  			<ref bean="workclassToRoleMapFactory" /> 
  		</property>
		<property name="targetMethod">
  			<value>getMap</value> 
  		</property>
	</bean>
	<bean id="workclassToRoleMapFactory" class="com.mikealbert.util.HashMapFromProperties">
		<property name="location"><value>classpath:WorkclassRoleXRef.properties</value></property>
		<property name="parsedAslistOfValues" value="true" />
	</bean>
	
	<bean id="originToAuthorityMap" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
  			<ref bean="originToAuthorityMapFactory" /> 
  		</property>
		<property name="targetMethod">
  			<value>getMap</value> 
  		</property>
	</bean>
	<bean id="originToAuthorityMapFactory" class="com.mikealbert.util.HashMapFromProperties">
		<property name="location"><value>classpath:OriginAuthorityXRef.properties</value></property>
		<property name="parsedAslistOfValues" value="true" />
	</bean>  	
 </beans>
 
 